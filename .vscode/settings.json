{
  "editor.fontSize": 16,
  "window.zoomLevel": 0,
  "explorer.confirmDelete": true,
  "launch": {
    "configurations": [],
    "compounds": []
  },
  // 头部注释
  "fileheader.customMade": {
    // Author字段是文件的创建者 可以在specialOptions中更改特殊属性
    // 公司项目和个人项目可以配置不同的用户名与邮箱 搜索: gitconfig includeIf  比如: https://ayase.moe/2021/03/09/customized-git-config/
    // 自动提取当前git config中的: 用户名、邮箱
    "Author": "git config user.name", // 同时获取用户名与邮箱
    // "Author": "git config user.name", // 仅获取用户名
    // "Author": "git config user.email", // 仅获取邮箱
    // "Author": "OBKoro1", // 写死的固定值 不从git config中获取
    "Date": "Do not edit", // 文件创建时间(不变)
    // LastEditors、LastEditTime、FilePath将会自动更新 如果觉得时间更新的太频繁可以使用throttleTime(默认为1分钟)配置更改更新时间。
    "LastEditors": "git config user.name", // 文件最后编辑者 与Author字段一致
    // 由于编辑文件就会变更最后编辑时间，多人协作中合并的时候会导致merge
    // 可以将时间颗粒度改为周、或者月，这样冲突就减少很多。搜索变更时间格式: dateFormat
    "LastEditTime": "Do not edit", // 文件最后编辑时间
    // 输出相对路径，类似: /文件夹名称/src/index.js
    "FilePath": "Do not edit", // 文件在项目中的相对路径 自动更新
    // 插件会自动将光标移动到Description选项中 方便输入 Description字段可以在specialOptions更改
    "Description": "", // 介绍文件的作用、文件的入参、出参。
    // custom_string_obkoro1~custom_string_obkoro100都可以输出自定义信息
    // 可以设置多条自定义信息 设置个性签名、留下QQ、微信联系方式、输入空行等
    "custom_string_obkoro1": "",
    // 版权声明 保留文件所有权利 自动替换年份 获取git配置的用户名和邮箱
    // 版权声明获取git配置, 与Author字段一致: ${git_name} ${git_email} ${git_name_email}
    "custom_string_obkoro1_copyright": "Copyright (c) ${now_year} by ${git_name}, All Rights Reserved. "
    // "custom_string_obkoro1_copyright": "Copyright (c) ${now_year} by ${git_name_email}, All Rights Reserved. "
    // "custom_string_obkoro1_copyright": "Copyright (c) ${now_year} by 写死的公司名/用户名, All Rights Reserved. "
  },
  // 函数注释
  "fileheader.cursorMode": {
    "description": "", // 函数注释生成之后，光标移动到这里
    "param": "", // param 开启函数参数自动提取 需要将光标放在函数行或者函数上方的空白行
    "return": "",
  },
  // --------------------------------------------------------------------------------------
  // Code Runner
  // To run code:
  //   use shortcut "Ctrl Opt N" *
  //   or press F1 and then select/type Run Code,
  //   or right click the Text Editor and then click Run Code in editor context menu
  //   or click Run Code button in editor title menu
  //   or click Run Code button in context menu of file explorer
  // To stop the running code:
  //   use shortcut "Ctrl Opt M" *
  //   or press F1 and then select/type Stop Code Run
  //   or right click the Output Channel and then click Stop Code Run in context menu
  "code-runner.executorMap": {
    // Introduction:
    //   Make sure the executor PATH of each language is set in the environment variable.
    //   You could also add entry into "code-runner.executorMap" to set the executor PATH.
    // Supported customized parameters:
    //   $workspaceRoot: The path of the folder opened in VS Code
    //   $dir: The directory of the code file being run
    //   $fullFileName: The full name of the code file being run
    //   $fileName: The base name of the code file being run, that is the file without the directory
    //   $fileNameWithoutExt: The base name of the code file being run without its extension
    //   -O2 o2 Optimization
    /* ------ 编译、运行只有一个文件的cpp文件 ------ */
    // 注：路径中有空格不会出现问题
    "cpp": "g++ $fullFileName -o $dir\"$fileNameWithoutExt\"\".out\" -W -Wall -O2 -std=c++17 && $dir\"$fileNameWithoutExt\"\".out\"",
    // 其中 $fullFileName 是绝对路径，是主文件
    // 自己决定是否加入 && rm $dir\"$fileNameWithoutExt\"\".out\"（也可以添加"files.exclude"）
    /* ------ 编译、运行多个cpp文件 ------ */
    // "cpp": "g++ $fullFileName <file_to_link> -o $dir\"$fileNameWithoutExt\"\".out\" -W -Wall -O2 -std=c++17 && $dir\"$fileNameWithoutExt\"\".out\"",
    // <file_to_link>的写法：
    //   一般的，你也可以直接写绝对路径
    //     \"/path/xxxx.cpp\"
    //   如果你链接的cpp文件和主文件在一个目录下：
    //     $dir\"xxxx.cpp\"
    //   更一般的，如果你链接的cpp文件不和主文件在一个目录下，需要从当前VSCode的工作目录补充相对路径从而形成绝对路径：
    //     $workspaceRoot\"relative/path/xxxx.cpp\"
    /* ------ 编译c文件 ------ */
    "c": "gcc $fullFileName -o $dir\"$fileNameWithoutExt\"\".out\" -W -Wall -O2 -std=c17 && $dir\"$fileNameWithoutExt\"\".out\"",
    // "c": "gcc $fullFileName <file_to_link> -o $dir\"$fileNameWithoutExt\"\".out\" -W -Wall -O2 -std=c17 && $dir\"$fileNameWithoutExt\"\".out\"",
  },
  // Whether to clear previous output before each run (default is false):
  "code-runner.clearPreviousOutput": true,
  // Whether to save all files before running (default is false):
  "code-runner.saveAllFilesBeforeRun": false,
  // Whether to save the current file before running (default is false):
  "code-runner.saveFileBeforeRun": true,
  // Whether to show extra execution message like [Running] ... and [Done] ... (default is true):
  "code-runner.showExecutionMessage": true, // cannot see that message is you set "code-runner.runInTerminal" to true
  // Whether to run code in Integrated Terminal (only support to run whole file in Integrated Terminal, neither untitled file nor code snippet) (default is false):
  "code-runner.runInTerminal": true, // cannot input data when setting to false
  // Whether to preserve focus on code editor after code run is triggered (default is true, the code editor will keep focus; when it is false, Terminal or Output Channel will take focus):
  "code-runner.preserveFocus": false,
  // Whether to ignore selection to always run entire file. (Default is false)
  "code-runner.ignoreSelection": true,
  "files.associations": {
    "ios": "cpp",
    "iostream": "cpp",
    "iosfwd": "cpp",
    "__locale": "cpp",
    "bitset": "cpp",
    "istream": "cpp",
    "locale": "cpp",
    "ostream": "cpp",
    "streambuf": "cpp",
    "__bit_reference": "cpp",
    "__bits": "cpp",
    "__config": "cpp",
    "__debug": "cpp",
    "__errc": "cpp",
    "__hash_table": "cpp",
    "__mutex_base": "cpp",
    "__node_handle": "cpp",
    "__nullptr": "cpp",
    "__split_buffer": "cpp",
    "__string": "cpp",
    "__threading_support": "cpp",
    "__tuple": "cpp",
    "array": "cpp",
    "atomic": "cpp",
    "cctype": "cpp",
    "chrono": "cpp",
    "clocale": "cpp",
    "cmath": "cpp",
    "compare": "cpp",
    "complex": "cpp",
    "concepts": "cpp",
    "cstdarg": "cpp",
    "cstddef": "cpp",
    "cstdint": "cpp",
    "cstdio": "cpp",
    "cstdlib": "cpp",
    "cstring": "cpp",
    "ctime": "cpp",
    "cwchar": "cpp",
    "cwctype": "cpp",
    "exception": "cpp",
    "initializer_list": "cpp",
    "iomanip": "cpp",
    "limits": "cpp",
    "memory": "cpp",
    "mutex": "cpp",
    "new": "cpp",
    "optional": "cpp",
    "ratio": "cpp",
    "sstream": "cpp",
    "stdexcept": "cpp",
    "string": "cpp",
    "string_view": "cpp",
    "system_error": "cpp",
    "thread": "cpp",
    "tuple": "cpp",
    "type_traits": "cpp",
    "typeinfo": "cpp",
    "unordered_map": "cpp",
    "valarray": "cpp",
    "variant": "cpp",
    "vector": "cpp",
    "algorithm": "cpp",
    "functional": "cpp",
    "stdio.h": "c"
  },
  "files.exclude": {
    "**/*.out": true,
    "**/*.class": true,
  },
  // ---------------------------------------------------------------------
  // Vs code自动生成Doxygen格式注释 
  // https://www.cnblogs.com/silencehuan/p/11875958.html
  // Doxygen documentation generator set
  // 文件注释：版权信息模板
    "doxdocgen.file.copyrightTag": [
      "@copyright Copyright (c) {year}  XX通信公司"
  ],
  // 文件注释：自定义模块，这里我添加一个修改日志
  "doxdocgen.file.customTag": [
      "@par 修改日志:",
      "<table>",
      "<tr><th>Date       <th>Version <th>Author  <th>Description",
      "<tr><td>{date} <td>1.0     <td>wangh     <td>内容",
      "</table>",
  ],
  // 文件注释的组成及其排序
  "doxdocgen.file.fileOrder": [
      "file",		// @file
      "brief",	// @brief 简介
      "author",	// 作者
      "version",	// 版本
      "date",		// 日期
      "empty",	// 空行
      "copyright",// 版权
      "empty",
      "custom"	// 自定义
  ],
  // 下面时设置上面标签tag的具体信息
  "doxdocgen.file.fileTemplate": "@file {name}",
  "doxdocgen.file.versionTag": "@version 1.0",
  "doxdocgen.generic.authorEmail": "wanghuan3037@fiberhome.com",
  "doxdocgen.generic.authorName": "wangh",
  "doxdocgen.generic.authorTag": "@author {author} ({email})",
  // 日期格式与模板
  "doxdocgen.generic.dateFormat": "YYYY-MM-DD",
  "doxdocgen.generic.dateTemplate": "@date {date}",

  // 根据自动生成的注释模板（目前主要体现在函数注释上）
  "doxdocgen.generic.order": [
      "brief",
      "tparam",
      "param",
      "return"
  ],
  "doxdocgen.generic.paramTemplate": "@param{indent:8}{param}{indent:25}My Param doc",
  "doxdocgen.generic.returnTemplate": "@return {type} ",
  "doxdocgen.generic.splitCasingSmartText": true,
  "cSpell.words": [
    "CCONTACT"
  ],

  // // The prefix that is used for each comment line except for first and last.
  // "doxdocgen.c.commentPrefix": " * ",
  // // Smart text snippet for factory methods/functions.
  // "doxdocgen.c.factoryMethodText": "Create a {name} object",
  // // The first line of the comment that gets generated. If empty it won't get generated at all.
  // "doxdocgen.c.firstLine": "/**",
  // // Smart text snippet for getters.
  // "doxdocgen.c.getterText": "Get the {name} object",
  // // The last line of the comment that gets generated. If empty it won't get generated at all.
  // "doxdocgen.c.lastLine": " */",
  // // Smart text snippet for setters.
  // "doxdocgen.c.setterText": "Set the {name} object",
  // // Doxygen comment trigger. This character sequence triggers generation of Doxygen comments.
  // "doxdocgen.c.triggerSequence": "/**",
  // // Smart text snippet for constructors.
  // "doxdocgen.cpp.ctorText": "Construct a new {name} object",
  // // Smart text snippet for destructors.
  // "doxdocgen.cpp.dtorText": "Destroy the {name} object",
  // // The template of the template parameter Doxygen line(s) that are generated. If empty it won't get generated at all.
  // "doxdocgen.cpp.tparamTemplate": "@tparam {param} ",
  // // File copyright documentation tag.  Array of strings will be converted to one line per element.  Can template {year}.
  // "doxdocgen.file.copyrightTag": [
  //   "@copyright Copyright (c) {year}"
  // ],
  // // Additional file documentation. One tag per line will be added. Can template `{year}`, `{date}`, `{author}`, `{email}` and `{file}`. You have to specify the prefix.
  // "doxdocgen.file.customTag": [],
  // // The order to use for the file comment. Values can be used multiple times. Valid values are shown in default setting.
  // "doxdocgen.file.fileOrder": [
  //   "file",
  //   "author",
  //   "brief",
  //   "version",
  //   "date",
  //   "empty",
  //   "copyright",
  //   "empty",
  //   "custom"
  // ],
  // // The template for the file parameter in Doxygen.
  // "doxdocgen.file.fileTemplate": "@file {name}",
  // // Version number for the file.
  // "doxdocgen.file.versionTag": "@version 0.1",
  // // Set the e-mail address of the author.  Replaces {email}.
  // "doxdocgen.generic.authorEmail": "you@domain.com",
  // // Set the name of the author.  Replaces {author}.
  // "doxdocgen.generic.authorName": "your name",
  // // Set the style of the author tag and your name.  Can template {author} and {email}.
  // "doxdocgen.generic.authorTag": "@author {author} ({email})",
  // // If this is enabled a bool return value will be split into true and false return param.
  // "doxdocgen.generic.boolReturnsTrueFalse": true,
  // // The template of the brief Doxygen line that is generated. If empty it won't get generated at all.
  // "doxdocgen.generic.briefTemplate": "@brief {text}",
  // // The format to use for the date.
  // "doxdocgen.generic.dateFormat": "YYYY-MM-DD",
  // // The template for the date parameter in Doxygen.
  // "doxdocgen.generic.dateTemplate": "@date {date}",
  // // Decide if you want to get smart text for certain commands.
  // "doxdocgen.generic.generateSmartText": true,
  // // Whether include type information at return.
  // "doxdocgen.generic.includeTypeAtReturn": true,
  // // How many lines the plugin should look for to find the end of the declaration. Please be aware that setting this value too low could improve the speed of comment generation by a very slim margin but the plugin also may not correctly detect all declarations or definitions anymore.
  // "doxdocgen.generic.linesToGet": 20,
  // // The order to use for the comment generation. Values can be used multiple times. Valid values are shown in default setting.
  // "doxdocgen.generic.order": [
  //   "brief",
  //   "empty",
  //   "tparam",
  //   "param",
  //   "return",
  //   "custom",
  //   "version",
  //   "author",
  //   "date",
  //   "copyright"
  // ],
  // // Custom tags to be added to the generic order. One tag per line will be added. Can template `{year}`, `{date}`, `{author}`, `{email}` and `{file}`. You have to specify the prefix.
  // "doxdocgen.generic.customTags": [],
  // // The template of the param Doxygen line(s) that are generated. If empty it won't get generated at all.
  // "doxdocgen.generic.paramTemplate": "@param {param} ",
  // // The template of the return Doxygen line that is generated. If empty it won't get generated at all.
  // "doxdocgen.generic.returnTemplate": "@return {type} ",
  // // Decide if the values put into {name} should be split according to their casing.
  // "doxdocgen.generic.splitCasingSmartText": true,
  // // Array of keywords that should be removed from the input prior to parsing.
  // "doxdocgen.generic.filteredKeywords": [],
  // // Substitute {author} with git config --get user.name.
  // "doxdocgen.generic.useGitUserName": false,
  // // Substitute {email} with git config --get user.email.
  // "doxdocgen.generic.useGitUserEmail": false,
  // // Provide intellisense and snippet for doxygen commands
  // "doxdocgen.generic.commandSuggestion": true,
  // // Add `\\` in doxygen command suggestion for better readbility (need to enable commandSuggestion)
  // "doxdocgen.generic.commandSuggestionAddPrefix": false
}