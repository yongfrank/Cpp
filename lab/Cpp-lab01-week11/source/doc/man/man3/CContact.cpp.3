.TH "CContact.cpp" 3 "2022年 十一月 22日 星期二" "Version 1.0.0" "ContactAddressBook" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CContact.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'CContact\&.h'\fP
.br

.SS "函数"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, \fBCContact\fP contactInfo)"
.br
.ti -1c
.RI "std::istream & \fBoperator>>\fP (std::istream &is, \fBCContact\fP &contactToBeRevised)"
.br
.ti -1c
.RI "bool \fBpr\fP (const \fBCContact\fP &lhsContact, const \fBCContact\fP &rhsContact)"
.br
.ti -1c
.RI "bool \fBmatch\fP (std::string &pattern, std::string &source)"
.br
.RI "字符串匹配，判断字符串source是否匹配pattern，或者说字符串source是pattern所表达的集合中的某个成员 "
.in -1c
.SH "函数说明"
.PP 
.SS "bool match (std::string & pattern, std::string & source)"

.PP
字符串匹配，判断字符串source是否匹配pattern，或者说字符串source是pattern所表达的集合中的某个成员 
.br
 \fCstring::npos\fP 静态成员常量
.PP
是对类型为 \fCsize_t\fP 的元素具有最大可能的值。 当这个值在字符串成员函数中的长度或者子长度被使用时，该值表示“直到字符串结尾”。 作为返回值他通常被用作表明没有匹配。 
.PP
.nf
if (s1\&.find(s2) != std::string::npos) {
    std::cout << "found!" << '\n';
}

.fi
.PP
 
.PP
\fB测试\fP
.RS 4

.RE
.PP
.PP
.nf
std::string matchTestCase1Pattern = "Franek", matchTestCase1Source = "Frank Chu";
if(match(matchTestCase1Pattern, matchTestCase1Source)) {
    std::cout << "Yes" << "\n";
} else {
    std::cout << "No" << "\n";
}
.fi
.PP
 
.PP
\fB参见\fP
.RS 4

.IP "\(bu" 2
Check if a string contains a string in C++ https://stackoverflow.com/questions/2340281/check-if-a-string-contains-a-string-in-c
.IP "\(bu" 2
C++ 中 \fCstring::find()\fP 函数和 \fCstring::npos\fP 函数的使用 https://www.cnblogs.com/lixuejian/p/10844905.html
.IP "\(bu" 2
std::string::find 空字符串 返回结果不是 string::npos https://blog.csdn.net/yasi_xi/article/details/7305443
.IP "\(bu" 2
查找字符串，支持通配符查找，通配符包含 \&.和? https://blog.csdn.net/wang_anna/article/details/117019969
.IP "\(bu" 2
通配符（？，*）与正则表达式 https://blog.csdn.net/yh13572438258/article/details/121545229
.IP "\(bu" 2
str::string和wchar_t*相互转化 https://blog.csdn.net/zddblog/article/details/38670349
.IP "\(bu" 2
C++：wchar_t* & string相互转换 https://codeantenna.com/a/uDA7bfXIkF
.IP "\(bu" 2
C++11之正则表达式（regex_match、regex_search、regex_replace） https://blog.csdn.net/qq_45254369/article/details/125491031
.PP
.RE
.PP
不区分大小写，需包含头文件 From: 查找字符串，支持通配符查找，通配符包含 \&.和? https://blog.csdn.net/wang_anna/article/details/117019969 
.PP
.nf
#include<regex>
using namespace regex_constants;
ECMAScript | icase // Case insensitive

.fi
.PP
 
.PP
在文件 \fBCContact\&.cpp\fP 第 \fB163\fP 行定义\&.
.SS "std::ostream & operator<< (std::ostream & os, \fBCContact\fP contactInfo)"

.PP
\fB参见\fP
.RS 4
【懒猫老师-最简版C++-(18)类的友元】 https://www.bilibili.com/video/BV127411Q7eu/ 
.RE
.PP
\fB注解\fP
.RS 4
Overloading the << Operator for Your Own Classes https://learn.microsoft.com/en-us/cpp/standard-library/overloading-the-output-operator-for-your-own-classes?view=msvc-170 
.RE
.PP

.PP
在文件 \fBCContact\&.cpp\fP 第 \fB70\fP 行定义\&.
.SS "std::istream & operator>> (std::istream & is, \fBCContact\fP & contactToBeRevised)"

.PP
\fB注解\fP
.RS 4
Overloading the >> Operator for Your Own Classes https://learn.microsoft.com/en-us/cpp/standard-library/overloading-the-input-operator-for-your-own-classes?view=msvc-170 
.RE
.PP

.PP
在文件 \fBCContact\&.cpp\fP 第 \fB77\fP 行定义\&.
.SS "bool pr (const \fBCContact\fP & lhsContact, const \fBCContact\fP & rhsContact)"

.PP
\fB测试\fP
.RS 4

.RE
.PP
.PP
.nf
std::string name = "Frank Chu", number = "1596", group = "Student";
std::string rhsName = "Panda", rhsNumber = "22", rhsGroup = "Teacher";
if(pr(CContact(name, number, group), CContact(rhsName, rhsNumber, rhsGroup))) {
    std::cout << "< change postion" << "\n";
} else {
    std::cout << "> do not change" << "\n";
}
.fi
.PP
 
.PP
在文件 \fBCContact\&.cpp\fP 第 \fB98\fP 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 ContactAddressBook 的 源代码自动生成\&.
